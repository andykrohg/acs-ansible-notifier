- hosts: localhost
  gather_facts: no
  name: Respond to Iptables being executed in a privileged container
  tasks:
  - name: Send Alert content to stdout
    debug:
      msg: "{{ alert }}"
  
  - name: Get pod name and namespace
    set_fact:
      pod_name: "{{ alert.processViolation.processes[0].podId }}"
      pod_namespace: "{{ alert.processViolation.processes[0].namespace }}"

  - name: Print out logs from malicious container
    shell: >
      oc -n {{ pod_namespace }} logs {{ pod_name }}
    ignore_errors: yes

  - name: Get jq
    ansible.builtin.get_url:
      url: https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64
      dest: ./jq
      mode: 0777

  - name: Search audit log for offending pod
    shell: |
      for mn in $(oc get nodes -l node-role.kubernetes.io/master -o custom-columns=NODE:.metadata.name --no-headers);
      do
        oc adm node-logs $mn \
        --path=kube-apiserver/audit.log |  \
        ./jq 'select(.objectRef.name == "{{ pod_name }}" and .objectRef.namespace == "{{ pod_namespace }}" and .verb == "create").user.username' -r;
      done
    register: username_hits

  - name: Get User name
    set_fact:
      username: "{{ username_hits.stdout_lines | first }}"

  - name: Get ClusterRoleBindings
    shell: >
      oc get clusterrolebindings -o json | ./jq '[.items[] | select(has("subjects") and .subjects[].name=="{{ username }}")]'
    register: clusterrolebindings

  - name: Get RoleBindings
    shell: >
      oc get rolebindings -A -o json | ./jq '[.items[] | select(has("subjects") and .subjects[].name=="{{ username }}")]'
    register: rolebindings

  - name: Print ClusterRoleBindings to be removed
    debug:
      msg: "{{ clusterrolebindings.stdout | from_json }}"

  - name: Print RoleBindings to be removed
    debug:
      msg: "{{ rolebindings.stdout | from_json }}"

  - name: Remove bindings
    k8s:
      state: absent
      definition: |
        {{ ( clusterrolebindings.stdout | from_json ) + ( rolebindings.stdout | from_json ) }}

  - name: Get node for the pod
    k8s_info:
      kind: Pod
      namespace: "{{ pod_namespace }}"
      name: "{{ pod_name }}"
    register: pod_info

  - name: Remove existing node_name file if it exists
    file:
      path: "/tmp/node_name.txt"
      state: absent

# TODO: VERIFY. I know for our demo we are only spinning up one pod, but I believe the k8s module iss returning a list, so I'm specifying the first result in the list just to be safe, but need to test this. #
  - name: Save node name to a temporary file
    copy:
      content: "{{ pod_info.resources[0].spec.nodeName }}"
      dest: "/tmp/node_name.txt"
